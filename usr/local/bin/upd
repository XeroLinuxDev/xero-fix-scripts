#!/usr/bin/env bash

# XeroLinux System Updater
# ---------------------------------------
# - Updates system packages (Pacman, Yay, or Paru)
# - Updates Flatpak applications
# - Updates Rust toolchain (if installed)
# - Updates device firmware (fwupd, skipped inside VMs)
# - Tracks if updates were skipped
# - Smartly detects if a reboot is needed (kernel/firmware)
# - Provides clean, colorful prompts with emojis
# - Old-school [ OK ] reboot status style
# ---------------------------------------
# Written for a smoother, safer update experience üöÄ

set -e

# Colors
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[1;34m'
BOLD='\033[1m'
MAGENTA='\033[0;35m'
ORANGE='\033[0;33m'
LIGHT_GREEN='\033[1;32m'
RESET='\033[0m'

# Track if any updates were skipped
skipped_updates=false
must_reboot=false

# Function to detect if running inside a VM
is_vm() {
  if command -v systemd-detect-virt &>/dev/null; then
    [[ "$(systemd-detect-virt)" != "none" ]]
  else
    return 1
  fi
}

# Banner function
print_title() {
  clear
  echo -e "${BOLD}${BLUE}"
  if command -v figlet &>/dev/null; then
    figlet -f small "XeroLinux Updater"
  else
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë              XeroLinux System Updater              ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
  fi
  echo -e "${RESET}"
}

# Ensure figlet is installed
if ! command -v figlet &>/dev/null; then
  echo -e "${YELLOW}Installing 'figlet' for banner display...${RESET}"
  echo
  if sudo pacman -Syy --noconfirm figlet &>/dev/null; then
    echo -e "${GREEN}[‚úî] figlet installed.${RESET}\n"
  else
    echo -e "${RED}[‚úò] Failed to install figlet.${RESET}\n"
  fi
fi

# Show banner
print_title

# Detect AUR helper
if command -v yay &>/dev/null; then
    PKG_MANAGER="yay"
elif command -v paru &>/dev/null; then
    PKG_MANAGER="paru"
else
    PKG_MANAGER="pacman"
fi

# Prompt before system update
read -rp "$(echo -e "${CYAN}üöÄ Update protocol ready. Execute ? (Y/n): ${RESET}")" confirm_update
if [[ -z "$confirm_update" || "$confirm_update" =~ ^[Yy]$ ]]; then
  echo
  echo -e "${MAGENTA}üì¶ Updating system packages...${RESET}"
  echo
  if [[ "$PKG_MANAGER" == "pacman" ]]; then
      sudo pacman -Syyu
  else
      $PKG_MANAGER -Syyu
  fi
else
  echo
  echo -e "${ORANGE}‚ö†Ô∏è Skipped system update.${RESET}"
  skipped_updates=true
fi
echo

# Optional Flatpak update
if command -v flatpak &>/dev/null; then
  read -rp "$(echo -e "${CYAN}üì¶ Flatpak node online. Sync app containers now ? (Y/n): ${RESET}")" update_flatpak
  if [[ -z "$update_flatpak" || "$update_flatpak" =~ ^[Yy]$ ]]; then
    echo
    echo -e "${MAGENTA}üì¶ Updating Flatpak apps...${RESET}"
    echo
    flatpak update -y
  else
    echo
    echo -e "${ORANGE}‚ö†Ô∏è Skipped Flatpak updates.${RESET}"
    skipped_updates=true
  fi
else
  echo
  echo -e "${CYAN}‚ùå Flatpak is not installed. Skipping Flatpak updates.${RESET}"
fi
echo

# Optional Rust toolchain update
if command -v rustup &>/dev/null; then
  read -rp "$(echo -e "${CYAN}ü¶Ä Rustup found. Sync toolchain update ? (Y/n): ${RESET}")" update_rust
  if [[ -z "$update_rust" || "$update_rust" =~ ^[Yy]$ ]]; then
    echo
    echo -e "${MAGENTA}ü¶Ä Updating Rust toolchain...${RESET}"
    echo
    rustup update
  else
    echo
    echo -e "${ORANGE}‚ö†Ô∏è Skipped Rust update.${RESET}"
    skipped_updates=true
  fi
fi
echo

# Firmware update option using fwupd
if is_vm; then
  echo
  echo -e "${CYAN}üñ•Ô∏è VM shell detected-firmware patch sequence suspended.${RESET}"
else
  if command -v fwupdmgr >/dev/null 2>&1; then
    read -rp "$(echo -e "${CYAN}üß© fwupd daemon active. Deploy firmware update sequence ? (Y/n): ${RESET}")" confirm_fwupd
    if [[ -z "$confirm_fwupd" || "$confirm_fwupd" =~ ^[Yy]$ ]]; then
      echo
      echo -e "${MAGENTA}üîÑ Refreshing firmware metadata...${RESET}"
      echo
      sudo fwupdmgr refresh --force || true
      echo
      echo -e "${MAGENTA}‚öôÔ∏è  Checking and applying available firmware updates...${RESET}"
      echo
      sudo fwupdmgr update || true
      echo
      if fwupdmgr get-devices --no-metadata-refresh | grep -q "Requires reboot"; then
        echo -e "${RED}‚ö° Firmware update requires a reboot to complete!${RESET}"
        must_reboot=true
      fi
    else
      echo
      echo -e "${ORANGE}‚ö†Ô∏è Skipped firmware update.${RESET}"
      echo
      skipped_updates=true
    fi
  else
    echo
    echo -e "${RED}‚ùå fwupd is not installed on this system.${RESET}"
  fi
fi

# Final status message
if [ "$skipped_updates" = true ]; then
  echo -e "${ORANGE}üí° Some updates bypassed. Stability needs updates !${RESET}"
else
  echo -e "${LIGHT_GREEN}‚úÖ Update‚Äôs in. Sync‚Äôs locked.${RESET}"
fi

# --- Smart reboot prompt ---
echo

# Get current running kernel
current_kernel=$(uname -r)

# Get latest installed kernel (folder inside /usr/lib/modules)
installed_kernel=$(ls -1 /usr/lib/modules/ | sort -V | tail -n 1)

need_reboot=false

# Compare full strings exactly (no dots vs dashes confusion)
if [[ -n "$installed_kernel" && "$installed_kernel" != "$current_kernel" ]]; then
  echo -e "${RED}‚ö° Kernel mismatch:${RESET} ${YELLOW}${BOLD}${current_kernel}${RESET}${YELLOW} ‚Üí ${BOLD}${installed_kernel}${RESET}${YELLOW}. Reboot required.${RESET}"
  need_reboot=true
fi

# Also check if firmware update said reboot needed
if [ "$must_reboot" = true ]; then
  need_reboot=true
fi

# Prompt user if reboot needed
if [ "$need_reboot" = true ]; then
  echo
  read -rp "$(echo -e "${CYAN}üîÑ Core changes in place. Reboot to seal the deal ? (Y/n): ${RESET}")" confirm_reboot
  if [[ -z "$confirm_reboot" || "$confirm_reboot" =~ ^[Yy]$ ]]; then
    echo
    echo -e "${MAGENTA}‚ôªÔ∏è Rebooting system...${RESET}"
    sleep 2
    sudo reboot
  else
    echo
    echo -e "${RED}‚ö†Ô∏è Critical update queued! Reboot when possible !${RESET}"
  fi
fi

# Always show final [ OK ] if no reboot was needed
if [ "$need_reboot" = false ]; then
  echo -e "${LIGHT_GREEN}[  OK  ]${RESET} All systems synced and firing on all cylinders. No reboot needed."
fi
